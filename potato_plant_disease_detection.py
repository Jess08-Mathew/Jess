# -*- coding: utf-8 -*-
"""Potato Plant Disease Detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1E28njTZ8xh5jsqIJoqNsOmmsMuXJTAYp
"""

from google.colab import drive
drive.mount('/content/drive')

import shutil
import os

# Create a folder in Colab workspace
os.makedirs("/content/PlantVillage", exist_ok=True)

# Paths to your Drive folders (change if your paths are different)
drive_base = "/content/drive/MyDrive"

# List of folders to move
folders = ['Potato___Early_blight', 'Potato___Late_blight', 'Potato___healthy']

# Copy each folder from Drive into Colab's working directory
for folder in folders:
    src = os.path.join(drive_base, folder)
    dest = os.path.join("/content/PlantVillage", folder)
    # Check if the destination folder exists
    if os.path.exists(dest):
        # If it exists, remove it before copying
        shutil.rmtree(dest)
    # Now copy the source folder to the destination
    shutil.copytree(src, dest)

import tensorflow as tf
from tensorflow.keras import models,layers
import matplotlib.pyplot as plt

from re import I
IMAGE_SIZE = 256
BATCH_SIZE = 32
CHANNELS = 3
EPOCHS = 20

dataset = tf.keras.preprocessing.image_dataset_from_directory('/content/PlantVillage',shuffle=True,image_size=(256,256),batch_size=32)

class_names = dataset.class_names
class_names

len(dataset)

plt.figure(figsize=(10,10))
for image_batch, label_batch in dataset.take(1):
  for i in range(12):
    ax = plt.subplot(3,4,i+1)
    plt.imshow(image_batch[i].numpy().astype('uint8'))
    plt.axis('off')
    plt.title(class_names[label_batch[0]])
    print(image_batch[i].shape)

train_size = 0.8
len(dataset)*train_size

train_ds = dataset.take(54)
len(train_ds)

test_ds = dataset.skip(54)
len(test_ds)

val_size = 0.1
len(dataset)*val_size

val_ds = test_ds.take(6)
len(val_ds)

test_ds = test_ds.skip(6)
len(test_ds)

def get_dataset_partitions_tf(ds, train_split=0.8, val_split=0.1, test_split=0.1, shuffle=True, shuffle_size=10000):
  ds_size = len(ds)

  if shuffle:
    ds = ds.shuffle(shuffle_size, seed=12)

  train_size = int(train_split * ds_size)
  val_size = int(val_split * ds_size)

  train_ds = ds.take(train_size)
  val_ds = ds.skip(train_size).take(val_size)
  test_ds = ds.skip(train_size).skip(val_size)

  return train_ds, test_ds, val_ds

train_ds,test_ds,val_ds = get_dataset_partitions_tf(dataset)

len(train_ds)

len(val_ds)

len(test_ds)

train_ds = train_ds.cache().shuffle(1000).prefetch(buffer_size=tf.data.AUTOTUNE)
val_ds = val_ds.cache().shuffle(1000).prefetch(buffer_size=tf.data.AUTOTUNE)
test_ds = test_ds.cache().shuffle(1000).prefetch(buffer_size=tf.data.AUTOTUNE)

import tensorflow as tf

resize_and_rescale = tf.keras.Sequential([
    tf.keras.layers.Resizing(IMAGE_SIZE, IMAGE_SIZE),
    tf.keras.layers.Rescaling(1.0/255)
])

import tensorflow as tf

data_augmentation = tf.keras.Sequential([
    tf.keras.layers.RandomFlip("horizontal_and_vertical"),
    tf.keras.layers.RandomRotation(0.2)
])

from warnings import filterwarnings
filterwarnings('ignore')
input_shape=(BATCH_SIZE, IMAGE_SIZE,IMAGE_SIZE, CHANNELS)
n_classes = 3
model = models.Sequential([
    resize_and_rescale,
    data_augmentation,
    layers.Conv2D(32, (3,3), activation='relu', input_shape= input_shape),
    layers.MaxPooling2D((2,2)),
    layers.Conv2D(64, (3,3), activation='relu'),
    layers.MaxPooling2D((2,2)),
    layers.Conv2D(64, (3,3), activation='relu'),
    layers.MaxPooling2D((2,2)),
    layers.Conv2D(64, (3,3), activation='relu'),
    layers.MaxPooling2D((2,2)),
    layers.Conv2D(64, (3,3), activation='relu'),
    layers.MaxPooling2D((2,2)),
    layers.Conv2D(64, (3,3), activation='relu'),
    layers.MaxPooling2D((2,2)),
    layers.Flatten(),
    layers.Dense(64, activation='softmax'),
])

model.build(input_shape=input_shape)

model.summary()

model.compile(
    optimizer='adam',
    loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=False),
    metrics=['accuracy']
)

history = model.fit(
    train_ds,
    epochs = EPOCHS,
    batch_size = BATCH_SIZE,
    verbose = 1,
    validation_data = val_ds
)

scores = model.evaluate(test_ds)

scores

history.params

history.history.keys()

history.history['accuracy']

acc = history.history['accuracy']
val_acc = history.history['val_accuracy']

loss = history.history['loss']
val_loss = history.history['val_loss']

plt.figure(figsize=(8,8))
plt.subplot(1,2,1)
plt.plot(range(EPOCHS), acc, label='Training Accuracy')
plt.plot(range(EPOCHS), val_acc, label='Validation Accuracy')
plt.legend(loc='lower right')
plt.title('Training and Validation Accuracy')

plt.subplot(1, 2, 2)
plt.plot(range(EPOCHS), loss, label='Training Loss')
plt.plot(range(EPOCHS), val_loss, label='Validation Loss')
plt.legend(loc='upper right')
plt.title('Training and Validation Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')

plt.tight_layout()
plt.show()

for images_batch, labels_batch in test_ds.take(1):
    plt.imshow(images_batch[0].numpy().astype('uint8'))

import numpy as np
for images_batch, labels_batch in test_ds.take(1):
    first_image = images_batch[0].numpy().astype('uint8')
    first_label = labels_batch[0].numpy()

    print("First image to predict")
    plt.imshow(first_image)
    print("Actual label:",class_names[first_label])

    batch_prediction = model.predict(images_batch)
    print("Predicted label:",class_names[np.argmax(batch_prediction[0])])

def predict(model, img):
    img_array = tf.keras.preprocessing.image.img_to_array(images[i].numpy())
    img_array = tf.expand_dims(img_array, 0)

    predictions = model.predict(img_array)
    predicted_class = class_names[np.argmax(predictions[0])]
    confidence = round(100 * (np.max(predictions[0])), 2)
    return predicted_class, confidence

plt.figure(figsize=(15, 15))
for images, labels in test_ds.take(1):
    for i in range(9):
        ax = plt.subplot(3, 3, i + 1)
        plt.imshow(images[i].numpy().astype("uint8"))
        predicted_class, confidence = predict(model, images[i].numpy())
        actual_class = class_names[labels[i]]
        plt.title(f"Actual: {actual_class},\n Predicted: {predicted_class}.\n Confidence: {confidence}%")
        plt.axis("off")

model.save('my_model.keras')

!pip install fastapi uvicorn nest-asyncio pyngrok pillow

# Move saved model to Google Drive
import shutil
shutil.move('/content/my_model.keras', '/content/drive/MyDrive/my_model.keras')

!ngrok config add-authtoken 2wAvebmVJOgwBXAgl8guIMnEZB0_2ykDFmwEupjzxm3QxMMoD

!pip install gradio

import gradio as gr

def predict_image(img):
    img = img.resize((256, 256))
    img_array = image.img_to_array(img)
    img_array = np.expand_dims(img_array, axis=0) / 255.0
    predictions = model.predict(img_array)
    predicted_class = class_names[np.argmax(predictions)]
    return f"{predicted_class} ({np.max(predictions):.2f})"

gr.Interface(fn=predict_image, inputs=gr.Image(type="pil"), outputs="text").launch()

!fuser -k 8000/tcp

import nest_asyncio
import uvicorn
import threading

nest_asyncio.apply()

def start():
    uvicorn.run(app, host='0.0.0.0', port=8000)

thread = threading.Thread(target=start)
thread.start()

!pip install pyngrok
from pyngrok import ngrok
public_url = ngrok.connect(8000)
print(f"FastAPI is running at: {public_url}/docs")

!pip install gradio --quiet

from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image
import numpy as np
from PIL import Image
import gradio as gr

# Load model and class names
model = load_model("/content/drive/MyDrive/my_model.keras")  # Change if needed
class_names = ['Early Blight', 'Late Blight', 'Healthy']

# Define prediction function
def predict_image(img):
    img = img.resize((256, 256))
    img_array = image.img_to_array(img)
    img_array = np.expand_dims(img_array, axis=0) / 255.0
    predictions = model.predict(img_array)
    predicted_class = class_names[np.argmax(predictions)]
    return f"{predicted_class} ({np.max(predictions)*100:.2f}%)"

# Launch the Gradio app
gr.Interface(fn=predict_image, inputs=gr.Image(type="pil"), outputs="text").launch(share=True)

import gradio as gr
from tensorflow.keras.preprocessing import image
from PIL import Image
import numpy as np

def predict_image(img):
    # Convert to RGB in case image is in another mode (important!)
    img = img.convert("RGB")

    # Resize to match training input size
    img = img.resize((256, 256))

    # Convert image to numpy array
    img_array = image.img_to_array(img)

    # Normalize and expand dimensions
    img_array = img_array / 255.0
    img_array = np.expand_dims(img_array, axis=0)

    # Predict
    predictions = model.predict(img_array)

    # Debug print
    print("Predictions:", predictions)

    # Get class with highest probability
    predicted_class = class_names[np.argmax(predictions)]
    confidence = float(np.max(predictions))

    return f"{predicted_class} ({confidence*100:.2f}%)"

gr.Interface(
    fn=predict_image,
    inputs=gr.Image(type="pil"),
    outputs="text",
    title="Potato Leaf Disease Classifier",
    description="Upload a leaf image to detect Early Blight, Late Blight, or if it's Healthy."
).launch(share=True)